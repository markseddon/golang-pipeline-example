Description: >

    This CloudFormation template deploys a full CI/CD pipeline for Go
    development, including the creation of a CodeCommit repository, 
    building with AWS CodeBuild, and infrastructure deployment via AWS CloudFormation. 
    It creates AWS CodePipeline for orchastrating builds, testing and 
    deployments to staging and production environments. 

Parameters:
    
    ApplicationName: 
        Description: This will be used to name the pipeline, build, and infrastructure resources
        Type: String
        AllowedPattern: '[A-Za-z0-9-]+'
    
    ArtifactBucket:
        Description: An existing S3 bucket for storing the Pipeline Artifacts
        Type: String

    HostedZoneName:
        Description: Enter the Route53 HostedZone for the application
        Type: String

Metadata:

    AWS::CloudFormation::Interface:
        ParameterGroups:
            - 
                Label: 
                    default: Application Configuration
                Parameters:
                    - ApplicationName
                    - ArtifactBucket
                    - HostedZoneName
            
        ParameterLabels:
            ApplicationName: 
                default: Application Name
            ArtifactBucket: 
                default: CodePipeline Artifact Bucket
            HostedZoneName:
                default: Application HostedZoneName

Resources:

    ###########################################
    # CodeCommit Repository
    ###########################################

    CodeRepository:
        Type: AWS::CodeCommit::Repository
        Properties:
            RepositoryName: !Ref ApplicationName
            RepositoryDescription: !Sub Repository for the ${ApplicationName} application
    
    ###########################################
    # Code Pipeline
    ###########################################

    CodePipeline:
        Type: AWS::CodePipeline::Pipeline
        Properties:
            Name: !Ref ApplicationName
            RoleArn: !Sub ${CodePipelineRole.Arn}
            ArtifactStore: 
                Type: S3
                Location: !Ref ArtifactBucket
            Stages:


                # Acquire the source from the CodeCommit Repository
                - 
                    Name: Source
                    Actions:
                        -
                            Name: CodeCommit
                            ActionTypeId:
                                Category: Source
                                Owner: AWS
                                Version: 1
                                Provider: CodeCommit
                            OutputArtifacts:
                                -  Name: Source
                            Configuration:
                                RepositoryName: !Ref ApplicationName
                                BranchName: master
                
                # Use the CodeBuild service to build the application
                -
                    Name: Build
                    Actions:
                        -
                            Name: CodeBuild
                            InputArtifacts:
                                - Name: Source
                            ActionTypeId: 
                                Category: Build
                                Owner: AWS
                                Version: 1
                                Provider: CodeBuild
                            OutputArtifacts:
                                - Name: Built
                            Configuration: 
                                ProjectName: !Ref CodeBuild
                
                # Deploy to Staging
                -
                    Name: Staging
                    Actions:

                        # Use Cloudformation to deploy the infrastructure
                        - 
                            Name: DeployInfrastructure
                            RunOrder: 1
                            InputArtifacts:
                                - Name: Built
                            ActionTypeId:
                                Category: Deploy
                                Owner: AWS
                                Version: 1
                                Provider: CloudFormation
                            Configuration:
                                ActionMode: REPLACE_ON_FAILURE
                                RoleArn: !Sub ${CodePipelineCloudFormationRole.Arn}
                                Capabilities: CAPABILITY_NAMED_IAM
                                StackName: !Sub ${ApplicationName}-staging
                                TemplatePath: Built::cloudformation/infrastructure.yml
                                TemplateConfiguration: Built::config/staging.conf
                                ParameterOverrides: !Sub |
                                    {
                                        "ApplicationName": "${ApplicationName}",
                                        "EnvironmentName": "staging",
                                        "ArtifactBucket": "${ArtifactBucket}",
                                        "HostedZoneName": "${HostedZoneName}"
                                    }
                        
                        # Use CodeDeploy and the steps defined in appsec.yml to deploy the application to staging
                        - 
                            Name: DeployApplication
                            RunOrder: 2
                            InputArtifacts: 
                                - Name: Built
                            ActionTypeId:
                                Category: Deploy
                                Owner: AWS
                                Version: 1
                                Provider: CodeDeploy
                            Configuration: 
                                ApplicationName: !Ref ApplicationName
                                DeploymentGroupName: staging
                                
                
                # Deploy to production
                -
                    Name: Production
                    Actions:

                        # Use Cloudformation to deploy the infrastructure
                        - 
                            Name: DeployInfrastructure
                            RunOrder: 1
                            InputArtifacts:
                                - Name: Built
                            ActionTypeId:
                                Category: Deploy
                                Owner: AWS
                                Version: 1
                                Provider: CloudFormation
                            Configuration:
                                ActionMode: CREATE_UPDATE
                                RoleArn: !Sub ${CodePipelineCloudFormationRole.Arn}
                                Capabilities: CAPABILITY_NAMED_IAM
                                StackName: !Sub ${ApplicationName}-production
                                TemplatePath: Built::cloudformation/infrastructure.yml
                                TemplateConfiguration: Built::config/production.conf
                                ParameterOverrides: !Sub |
                                    {
                                        "ApplicationName": "${ApplicationName}",
                                        "EnvironmentName": "production",
                                        "ArtifactBucket": "${ArtifactBucket}",
                                        "HostedZoneName": "${HostedZoneName}"
                                    } 

                        # Use CodeDeploy and the steps defined in appsec.yml to deploy the application to staging
                        - 
                            Name: DeployApplication
                            RunOrder: 2
                            InputArtifacts: 
                                - Name: Built
                            ActionTypeId:
                                Category: Deploy
                                Owner: AWS
                                Version: 1
                                Provider: CodeDeploy
                            Configuration: 
                                ApplicationName: !Ref ApplicationName
                                DeploymentGroupName: production
                        

    ###########################################
    # CodeBuild Project and Service Roles
    ###########################################

    CodeBuild:
        Type: AWS::CodeBuild::Project
        Properties:
            Name: !Ref ApplicationName
            Description: !Sub Build project for ${ApplicationName}
            ServiceRole: !Ref CodeBuildRole
            Source:
                Type: CODEPIPELINE
            Environment:
                ComputeType: BUILD_GENERAL1_SMALL
                Image: aws/codebuild/golang:1.7.3
                Type: LINUX_CONTAINER
                EnvironmentVariables:
                    - 
                        Name: ARTIFACT_S3_BUCKET
                        Value: !Sub ${ArtifactBucket}
            Artifacts:
                Name: !Ref ApplicationName
                Type: CODEPIPELINE

    CodePipelineRole:
        Type: AWS::IAM::Role
        Properties: 
            Path: /
            RoleName: !Sub ${ApplicationName}-CodePipeline-${AWS::Region}
            AssumeRolePolicyDocument: |
                {
                    "Statement": [{
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": { 
                            "Service": "codepipeline.amazonaws.com" 
                        }
                    }]
                }
            Policies: 
                - 
                    PolicyName: !Sub ${ApplicationName}-CodePipeline-${AWS::Region}
                    PolicyDocument: !Sub |                    
                        {
                            "Statement": [
                                {
                                    "Action": [  
                                        "codecommit:CancelUploadArchive",
                                        "codecommit:GetBranch",
                                        "codecommit:GetCommit",
                                        "codecommit:GetUploadArchiveStatus",
                                        "codecommit:UploadArchive"
                                    ],
                                    "Resource": "*",
                                    "Effect": "Allow"
                                },
                                {
                                    "Action": [ "s3:GetBucketVersioning" ],
                                    "Resource": [ "arn:aws:s3:::${ArtifactBucket}" ],
                                    "Effect": "Allow"
                                },
                                {
                                    "Action": [
                                        "s3:PutObject",
                                        "s3:GetObject",
                                        "S3:GetObjectVersion"
                                    ],
                                    "Resource": [
                                        "arn:aws:s3:::${ArtifactBucket}/${ApplicationName}/*"
                                    ],
                                    "Effect": "Allow"
                                },
                                {
                                    "Action": [
                                        "codedeploy:CreateDeployment",
                                        "codedeploy:GetApplicationRevision",
                                        "codedeploy:GetDeployment",
                                        "codedeploy:GetDeploymentConfig",
                                        "codedeploy:RegisterApplicationRevision"
                                    ],
                                    "Resource": "*",
                                    "Effect": "Allow"
                                },
                                {
                                    "Action": [
                                        "cloudformation:CreateStack",
                                        "cloudformation:DeleteStack",
                                        "cloudformation:DescribeStacks",
                                        "cloudformation:UpdateStack",
                                        "cloudformation:CreateChangeSet",
                                        "cloudformation:DeleteChangeSet",
                                        "cloudformation:DescribeChangeSet",
                                        "cloudformation:ExecuteChangeSet",
                                        "cloudformation:SetStackPolicy",
                                        "cloudformation:ValidateTemplate",
                                        "iam:PassRole"
                                    ],
                                    "Resource": "*",
                                    "Effect": "Allow"
                                },
                                {
                                    "Action": [
                                        "codebuild:BatchGetBuilds",
                                        "codebuild:StartBuild"
                                    ],
                                    "Resource": "*",
                                    "Effect": "Allow"
                                }
                            ]
                        }

    CodePipelineCloudFormationRole:
        Type: AWS::IAM::Role
        Properties: 
            Path: /
            RoleName: !Sub ${ApplicationName}-CloudFormation-${AWS::Region}
            AssumeRolePolicyDocument: |
                    {
                        "Statement": [{
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": { 
                                "Service": "cloudformation.amazonaws.com" 
                            }
                        }]
                    }
            Policies: 
                - 
                    PolicyName: !Sub ${ApplicationName}-CloudFormation-${AWS::Region}
                    PolicyDocument: !Sub |                    
                        {
                            "Statement": [{
                                    "Effect": "Allow",
                                    "Action": [ "*" ],
                                    "Resource": "*"
                            }]
                        }

    ###########################################
    # CodeDeploy Application and ServiceRoles
    ###########################################

    CodeDeployApplication:
        Type: AWS::CodeDeploy::Application
        Properties:
            ApplicationName: !Sub ${ApplicationName}

    CodeDeployServiceRole:
        Type: AWS::IAM::Role
        Properties: 
            Path: /
            RoleName: !Sub ${ApplicationName}-CodeDeploy-${AWS::Region}
            AssumeRolePolicyDocument: |
                {
                    "Statement": [{
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": { 
                            "Service": "codedeploy.amazonaws.com" 
                        }
                    }]
                }
            Policies: 
                - PolicyName: !Sub ${AWS::StackName}-${AWS::Region}
                  PolicyDocument: !Sub |
                    {
                        "Version": "2012-10-17",
                        "Statement": [
                            {
                            "Effect": "Allow",
                            "Action": [
                                "autoscaling:CompleteLifecycleAction",
                                "autoscaling:DeleteLifecycleHook",
                                "autoscaling:DescribeAutoScalingGroups",
                                "autoscaling:DescribeLifecycleHooks",
                                "autoscaling:PutLifecycleHook",
                                "autoscaling:RecordLifecycleActionHeartbeat",
                                "ec2:DescribeInstances",
                                "ec2:DescribeInstanceStatus",
                                "tag:GetTags",
                                "tag:GetResources",
                                "sns:Publish",
                                "cloudwatch:DescribeAlarms"
                            ],
                            "Resource": "*"
                            }
                        ]
                    }

    CodeBuildRole:
        Type: AWS::IAM::Role
        Properties: 
            Path: /
            RoleName: !Sub ${ApplicationName}-CodeBuild-${AWS::Region}
            AssumeRolePolicyDocument: |
                    {
                        "Statement": [{
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": { 
                                "Service": "codebuild.amazonaws.com" 
                            }
                        }]
                    }
            Policies: 
                - 
                    PolicyName: !Sub ${ApplicationName}-CodeBuild-${AWS::Region}
                    PolicyDocument: !Sub |      
                        {
                            "Statement": [              
                                {
                                    "Effect": "Allow",
                                    "Resource": [ "*" ],
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Resource": [
                                        "arn:aws:s3:::${ArtifactBucket}/${ApplicationName}/*"
                                    ],
                                    "Action": [
                                        "s3:GetObject",
                                        "s3:GetObjectVersion",
                                        "s3:PutObject"
                                    ]
                                }
                            ]
                        }

Outputs:

    CodePipelineURL:
        Description: The URL for the created pipeline
        Value: !Sub https://${AWS::Region}.console.aws.amazon.com/codepipeline/home?region=${AWS::Region}#/view/${ApplicationName}      

    CodeDeployApplication:
        Description: The CodeDeploy application used across all environments
        Value: !Ref CodeDeployApplication
        Export:
            Name: !Sub CodeDeployApplication-${ApplicationName}

    CodeDeployServiceRoleArn:
        Description: The CodeDeploy service role used across all environments
        Value: !GetAtt CodeDeployServiceRole.Arn
        Export:
            Name: !Sub CodeDeployServiceRoleArn-${ApplicationName}


